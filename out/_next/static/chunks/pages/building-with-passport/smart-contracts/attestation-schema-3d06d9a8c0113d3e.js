(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1261],{1813:function(e,t,s){"use strict";s.r(t),s.d(t,{useTOC:function(){return useTOC}});var n=s(4175),a=s(4859),i=s(601),r=s(2816),o=s(1527);function ownKeys(e,t){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),s.push.apply(s,n)}return s}function _objectSpread(e){for(var t=1;t<arguments.length;t++){var s=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(s),!0).forEach(function(t){(0,n.Z)(e,t,s[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):ownKeys(Object(s)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(s,t))})}return e}function useTOC(e){return[{value:"Passport (Stamp) attestation schema",id:"passport-stamp-attestation-schema",depth:2},{value:"Overview",id:"overview",depth:3},{value:"Fields",id:"fields",depth:3},{value:"Score attestation schema",id:"score-attestation-schema",depth:2},{value:"Fields",id:"fields-1",depth:3},{value:"Decoding Attestations",id:"decoding-attestations",depth:2}]}function MDXLayout(e){var t=e.toc,s=void 0===t?useTOC(e):t,n=_objectSpread(_objectSpread({a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",span:"span",strong:"strong",ul:"ul"},(0,r.a)()),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{children:"Attestation schema"}),"\n",(0,o.jsx)(n.p,{children:"Onchain Passports use Attestations to verify that a particular address owns specific Stamps.\nUltimately, an Attestation is just a piece of data with a cryptographic signature."}),"\n",(0,o.jsx)(n.p,{children:"The data follows a known structure, known as a ‘schema’. The  schema is critical because it ensures the signing participant\nknows what they are signing, and provides a uniform data layout that enables users to decode the Attestations."}),"\n",(0,o.jsxs)(n.p,{children:["The schema is ",(0,o.jsx)(n.em,{children:"the layout of information being attested"}),".\nThe signature is the proof that a known, trusted verifier has seen the data and attested that it is truthful."]}),"\n",(0,o.jsx)(n.p,{children:"There are two attestations that are issued when users mint their Passports onchain, both of which are described below:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Passport (Stamp) attestation"}),"\n",(0,o.jsx)(n.li,{children:"Score attestation"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:s[0].id,children:s[0].value}),"\n",(0,o.jsx)(n.h3,{id:s[1].id,children:s[1].value}),"\n",(0,o.jsx)(n.p,{children:"The raw schema looks as follows:"}),"\n",(0,o.jsx)(n.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"","data-copy":"",children:(0,o.jsx)(n.code,{children:(0,o.jsx)(n.span,{children:(0,o.jsx)(n.span,{children:"uint256[] providers, bytes32[] hashes, uint64[] issuanceDates, uint64[] expirationDates, uint16 providerMapVersion"})})})}),"\n",(0,o.jsx)(n.p,{children:"Notice that the types for all these fields are numerical types or raw bytes.\nThis is because the human-readable information is compressed and encoded before being added to the attestation."}),"\n",(0,o.jsx)(n.p,{children:"You can see an example of a Stamp attestation on the Optimism network by visiting the following link:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://optimism.easscan.org/attestation/view/0xd53526d72b9e9283a70894ddfba32513b722a939d85c1a6be402416d29cdc0b9",children:"Example Passport (Stamp) attestation on Optimism"})}),"\n",(0,o.jsx)(n.h3,{id:s[2].id,children:s[2].value}),"\n",(0,o.jsx)(n.p,{children:"The fields are as follows:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"providers"}),": a u256 that is actually a bitmap where each position maps to a provider name. The mapping is made available offchain."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"hashes"}),": an ordered array of elements, with each element being 32 raw bytes. Each element in the array is a 32-byte hash that maps to a known Stamp. A provider might have multiple Stamps that each have a hash. The mapping is made available offchain."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"issuanceDates"}),": an ordered array of elements, with each element being 32 raw bytes. Each element represents the UNIX timestamp when the Stamp was verified."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"expirationDates"}),": an ordered array of elements, with each element being 32 raw bytes. Each element represents the UNIX timestamp when the Stamp expires."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"providerMapVersion"}),": an unsigned integer specifying which version of the ",(0,o.jsx)(n.code,{children:"providers"})," mapping the Attestation conforms to. This allows updates as providers are added and removed from the canonical set."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:s[3].id,children:s[3].value}),"\n",(0,o.jsx)(n.p,{children:"The raw schema looks as follows:"}),"\n",(0,o.jsx)(n.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"","data-copy":"",children:(0,o.jsx)(n.code,{children:(0,o.jsx)(n.span,{children:(0,o.jsx)(n.span,{children:"uint256 score, uint32 scorer_id, uint8 score_decimals"})})})}),"\n",(0,o.jsx)(n.p,{children:"You can see an example of a score attestation on the Optimism network by visiting the following link:"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://optimism.easscan.org/attestation/view/0x1d7832d2f4e5e71da3d8b0ceee72faf4cd44990057b21a26d9f775b911fe1bfe",children:"Example score attestation on Optimism"})}),"\n",(0,o.jsx)(n.h3,{id:s[4].id,children:s[4].value}),"\n",(0,o.jsx)(n.p,{children:"The fields are as follows:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"score"}),": the user’s Passport score as an unsigned integer"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"scorer_id"}),": the ID number for the specific Scorer instance that issued the ",(0,o.jsx)(n.code,{children:"score"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"score_decimals"}),": number of decimals in ",(0,o.jsx)(n.code,{children:"score"}),", similar to how ETH is divided into 1e18 Wei."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:s[5].id,children:s[5].value}),"\n",(0,o.jsxs)(n.p,{children:["The schema is used to encode and decode Attestations.\nFrom a raw attestation, you can extract the data that belongs to each field in the schema using an ABI decode method (such as ",(0,o.jsx)(n.code,{children:"abi.decode"})," in Solidity, ",(0,o.jsx)(n.code,{children:"abiCoder.decode()"})," in Ethers, etc) as follows:"]}),"\n",(0,o.jsx)(n.pre,{tabIndex:"0","data-language":"plaintext","data-word-wrap":"","data-copy":"",children:(0,o.jsxs)(n.code,{children:[(0,o.jsx)(n.span,{children:(0,o.jsx)(n.span,{children:"// Decode the attestion output"})}),"\n",(0,o.jsx)(n.span,{children:(0,o.jsx)(n.span,{children:"(providers, hashes, issuanceDates, expirationDates, providerMapVersion) = abi.decode("})}),"\n",(0,o.jsx)(n.span,{children:(0,o.jsx)(n.span,{children:"  attestation.data,"})}),"\n",(0,o.jsx)(n.span,{children:(0,o.jsx)(n.span,{children:"  (uint256[], bytes32[], uint64[], uint64[], uint16)"})}),"\n",(0,o.jsx)(n.span,{children:(0,o.jsx)(n.span,{children:");"})})]})}),"\n",(0,o.jsx)(n.p,{children:"You then need to apply some logic to the decoded data to extract actionable insights."}),"\n",(0,o.jsxs)(n.p,{children:["For example, you should extract the position indexes of each ",(0,o.jsx)(n.code,{children:"1"})," value in the ",(0,o.jsx)(n.code,{children:"providers"})," bitmap, then look up the ",(0,o.jsx)(n.code,{children:"Providers"})," at those same indexes in the providers mapping, found on the ",(0,o.jsx)(n.a,{href:"https://github.com/passportxyz/eas-proxy/blob/main/deployments/providerBitMapInfo.json",children:"Passport Github"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["You may also wish to extract each value from ",(0,o.jsx)(n.code,{children:"hashes"})," and find the matching entry in the Stamps mapping to determine which specific Stamps the Attestation contains."]}),"\n",(0,o.jsxs)(n.p,{children:["Similarly, you can determine the current time and check whether it is before or after the ",(0,o.jsx)(n.code,{children:"expirationDates"})," for each Stamp."]}),"\n",(0,o.jsxs)(n.p,{children:["You can see an example of how to do this in a Nextjs app in our ",(0,o.jsx)(n.a,{href:"./tutorials/integrating-onchain-stamp-data",children:"onchain Passports tutorial"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note"})," if you have more questions about the Attestation schema, you can chat in our ",(0,o.jsx)(n.a,{href:"https://t.me/+Mcp9RsRV7tVmYjZh",children:"developer support channel on Telegram"}),"."]})]})}t.default=(0,a.c)(MDXLayout,"/building-with-passport/smart-contracts/attestation-schema",{filePath:"pages/building-with-passport/smart-contracts/attestation-schema.mdx",timestamp:172911509e4,pageMap:i.v,frontMatter:{title:"Attestation schema",description:"Reference documentation for the Attestation schema used in Passport's smart contract stack."},title:"Attestation schema"},"undefined"==typeof RemoteContent?useTOC:RemoteContent.useTOC)},4885:function(e,t,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/building-with-passport/smart-contracts/attestation-schema",function(){return s(1813)}])}},function(e){e.O(0,[4859,601,9774,2888,179],function(){return e(e.s=4885)}),_N_E=e.O()}]);
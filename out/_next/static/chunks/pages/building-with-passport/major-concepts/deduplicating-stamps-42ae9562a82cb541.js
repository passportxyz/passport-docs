(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7011],{8753:function(e,t,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/building-with-passport/major-concepts/deduplicating-stamps",function(){return s(7060)}])},7060:function(e,t,s){"use strict";s.r(t),s.d(t,{useTOC:function(){return r}});var i=s(1527),a=s(4859),n=s(4243),o=s(2816);function r(e){return[{value:"Why is deduplication necessary?",id:"why-is-deduplication-necessary",depth:3},{value:"Do you need to handle deduplication in your app?",id:"do-you-need-to-handle-deduplication-in-your-app",depth:3},{value:"How does Human Passport handle duplicate Stamps?",id:"how-does-human-passport-handle-duplicate-stamps",depth:3},{value:"Things to note",id:"things-to-note",depth:3},{value:"Summary",id:"summary",depth:3}]}t.default=(0,a.c)((function(e){const{toc:t=r(e)}=e,s={code:"code",em:"em",h1:"h1",h3:"h3",p:"p",strong:"strong",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.h1,{children:"Deduplicating Stamps"}),"\n",(0,i.jsx)(s.h3,{id:t[0].id,children:t[0].value}),"\n",(0,i.jsx)(s.p,{children:"Stamp deduplication is a crucial feature that prevents users from amplifying their influence over some specific outcome by submitting the same Stamps across multiple Passports."}),"\n",(0,i.jsx)(s.p,{children:"It is important for users to be able to hold multiple Passports representing different user profiles that might be used to as identification in specific communities. However, without deduplication logic, this could allow users to repeatedly attach the same Stamps to multiple Passports, fooling an app into treating each Passport as a real, verified human."}),"\n",(0,i.jsx)(s.p,{children:"Deduplication ensures that a user can only associate an individual Stamp to one single identity within a specific context."}),"\n",(0,i.jsx)(s.h3,{id:t[1].id,children:t[1].value}),"\n",(0,i.jsx)(s.p,{children:"If your app uses a Passport default Scorer, then deduplication is already handled server-side. When you request a score through the API, we calculate scores after already deduplicating Stamps, meaning you don\u2019t have to implement any deduplication logic yourself."}),"\n",(0,i.jsxs)(s.p,{children:["However, if you are using your own custom scoring mechanism based on Stamp data, you will have to implement deduplication for yourself. Each Stamp has a ",(0,i.jsx)(s.code,{children:"hash"})," field that can be used as a unique identifer. You can store hashes and compare them across all your users\u2019 Passports to ensure they are not being used multiple times. Our Scorer uses a Last-In-First-Out mechanism to handle duplicates, but you might want to use your own algorithm in your custom Scorer."]}),"\n",(0,i.jsx)(s.h3,{id:t[2].id,children:t[2].value}),"\n",(0,i.jsx)(s.p,{children:"Human Passport handles the issue of Stamp duplication by automatically identifying and eliminating duplicate Stamps. This prevents users from using the same credentials to verify their Stamps and identity across multiple Passports. This ensures that each user in an application has a unique and consistent digital identity."}),"\n",(0,i.jsxs)(s.p,{children:["By default, the Human Passport API uses a ",(0,i.jsx)(s.strong,{children:"Last In, First Out (LIFO)"})," Stamp deduplication method."]}),"\n",(0,i.jsxs)(s.p,{children:["This means that, in a given scoring instance, if a Passport holder submits a Stamp that has already been submitted by another user, the ",(0,i.jsx)(s.em,{children:"duplicate"})," Stamp is ignored and not counted towards the score."]}),"\n",(0,i.jsx)(s.p,{children:"For example, let\u2019s say you build an application that uses the Human Passport API to verify the unique humanity of your users. Two Passports, \u201cPassport A\u201d and \u201cPassport B,\u201d present the same Stamp based on the same Twitter account. In this scenario, the Last-in-First-out deduplication method would only count the Stamp instance that was submitted earliest, ignoring the one that was submitted later."}),"\n",(0,i.jsx)(s.p,{children:"For example, if Passport A submitted the Twitter Stamp first, followed by Passport B, your app would only count the instance of the Twitter Stamp submitted by Passport A. The same rule applies to any subsequent instances of the Stamp."}),"\n",(0,i.jsx)(s.p,{children:"This LIFO method ensures that each Passport\u2019s score accurately reflects the unique identity of its holder. This prevents duplicate Stamps from skewing the verification process and prevents users from re-using evidence of personhood across multiple Passports within an application."}),"\n",(0,i.jsx)(s.h3,{id:t[3].id,children:t[3].value}),"\n",(0,i.jsx)(s.p,{children:"Stamps are unique to scoring instances. For example, one user uses Passport holder A with one Twitter account in an application that uses scoring instance X, and another user uses the same Twitter account in a distinct Passport in an independent scoring instance Y. In this case, both users will get scored for the Twitter account. As long as the scoring instances are independent, there is no concern for double counting or interference between instances. This allows users to create multiple personas that they use in different contexts but prevents double-counting of their credentials within a context."}),"\n",(0,i.jsx)(s.p,{children:"The scores assigned to Passports will not change once they are issued. This means that there is no need to recalculate Passport scores or synchronize them again in case of duplicate Stamp submissions. Once a score is assigned to a Passport, it remains fixed and can be relied upon for future verifications, even if a duplicate Stamp is submitted by a new Passport. This makes the scoring process more efficient and streamlined, which is particularly important for large and complex applications that score a high volume of verifiable credentials."}),"\n",(0,i.jsxs)(s.p,{children:["Also note that because Stamp deduplication is achieved using a \u2018last in, first out\u2019 model, it is possible for Passports with identical Stamps to return different scores from different Scorers. The reason is that if the identical passports A and B are submitted to Scorer 1 in the order ",(0,i.jsx)(s.code,{children:"A,B"}),", the returned score could be different to the same Passports submitted to Scorer 2 in the order ",(0,i.jsx)(s.code,{children:"B,A"}),", because different instances of duplicate Stamps would be removed."]}),"\n",(0,i.jsx)(s.h3,{id:t[4].id,children:t[4].value}),"\n",(0,i.jsx)(s.p,{children:"The LIFO deduplication strategy has several benefits for Passport holders and developers. It ensures that each Passport holder (in other words, Ethereum address) is assessed based on their unique set of Stamps, and that no one receives an unfair advantage due to having the same Stamp as another Passport holder within a given scoring instance. This means that for applications using the Human Passport API, there will be no double-counting of Stamps within the app, ensuring a fair and accurate assessment of each user\u2019s unique identity."})]})}),"/building-with-passport/major-concepts/deduplicating-stamps",{filePath:"pages/building-with-passport/major-concepts/deduplicating-stamps.mdx",timestamp:1742593489e3,pageMap:n.v,frontMatter:{title:"Deduplicating Stamps",description:"Stamp deduplication is important for preventing users from using the same Stamps across multiple Passports to influence some specific outcome."},title:"Deduplicating Stamps"},"undefined"===typeof RemoteContent?r:RemoteContent.useTOC)}},function(e){e.O(0,[4859,4243,9774,2888,179],(function(){return t=8753,e(e.s=t);var t}));var t=e.O();_N_E=t}]);